name: Build and Deploy node Express app to azure
on:
  push:
    branches:
      - master

env:
  AZURE_WEBAPP_NAME: "TestAppNodeExpressCosmosWebAppOnWindows"    # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: "Application"      # set this to the path to your web app project, defaults to the repository root
  NODE_VERSION: '8.11.1'                # set this to the node version to use
  RESOURCEGROUPNAME: "githubWorkflowL2tests-rg"
  LOCATION: "South Central US"
  HOSTINGPLANNAME: "TestAppNodeExpressCosmosWebAppOnWindows-plan"
  APPINSIGHTLOCATION: "South Central US"
  SKU: "D1 Shared"
  DATABASEACCOUNTID: "TestAppNodeExpressCosmosWebAppOnWindows"
  DATABASEACCOUNTLOCATION: "eastasia"

jobs:
  build:
    name: Build and Run tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ env.NODE_VERSION }}
    - name: npm install and build
      continue-on-error: false
      run: |
        cd Application
        npm install
        npm run build --if-present
    - name: Run unit tests
      continue-on-error: false
      run: |
        cd Tests
        npm install
        gulp unittest
    - name: Creating artifact directories
      run: |
        mkdir buildartifacts
        mkdir deploymenttemplates
    # Archieve build artifact
    - name: Archive Application
      uses: montudor/action-zip@v0.1.0
      with:
        args: zip -qq -r ./buildartifacts/Application.zip ./Application
    # uploading application to build artifact
    - name: Upload Application to Build Artifact
      continue-on-error: false
      uses: actions/upload-artifact@v2
      with:
        name: buildartifacts
        path: buildartifacts
    # Archive Arm templates
    - name: Archive ArmTemplates
      uses: montudor/action-zip@v0.1.0
      with:
        args: zip -qq -r ./deploymenttemplates/armtemplates.zip ./armTemplates
    # uploading Arm Templates to artifacts
    - name: Upload Arm templates to Artifact
      continue-on-error: false
      uses: actions/upload-artifact@v2
      with:
        name: deploymenttemplates
        path: deploymenttemplates
  Deploy:
    name: Deploy to azure web app
    needs: build
    runs-on: ubuntu-latest
    steps:
    # Downloading build artifact
    - name: Download a Build Artifact
      uses: actions/download-artifact@v2
      continue-on-error: false
      with:
        name: buildartifacts
        path: buildartifacts
    # Uzipping build artifacts
    - name: unzipping build artifact
      uses: montudor/action-zip@v0.1.0
      with:
       args: unzip -qq ./buildartifacts/Application.zip -d .
  # Downloading Arm Templates
    - name: Download an Arm template
      uses: actions/download-artifact@v2
      continue-on-error: false
      with:
        name: deploymenttemplates
        path: deploymenttemplates
    # Uzipping Arm template directory
    - name: unzipping arm artifact
      uses: montudor/action-zip@v0.1.0
      with:
       args: unzip -qq ./deploymenttemplates/armtemplates.zip -d .
    # login to azure
    - name: Login to Azure
      uses: azure/login@v1
      continue-on-error: false
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    # Deploy Arm template
    - name: Deploy ARM Template
      uses: azure/CLI@v1
      continue-on-error: false
      with:
        inlineScript: |
          az group create --name "${{ env.RESOURCEGROUPNAME }}" --location "${{ env.LOCATION }}"
          az deployment group create --resource-group "${{ env.RESOURCEGROUPNAME }}" --template-file ./armTemplates/windows-webapp-template.json --parameters webAppName="${{ env.AZURE_WEBAPP_NAME }}" hostingPlanName="${{ env.HOSTINGPLANNAME }}" appInsightsLocation="${{ env.APPINSIGHTLOCATION }}" sku="${{ env.SKU }}" databaseAccountId="${{ env.DATABASEACCOUNTID }}" databaseAccountLocation="${{ env.DATABASEACCOUNTLOCATION }}"
    - name: Fetch connection strings
      id: getConnectionStrings
      run: |
        sudo chmod  766 ./Application/connectionData.json
        echo "::set-output name=connectionstrings::`az cosmosdb keys list --name "${{ env.DATABASEACCOUNTID }}" --resource-group "${{ env.RESOURCEGROUPNAME }}" --type connection-strings --query connectionStrings[0].connectionString |xargs`"
        echo "::add-mask::`az cosmosdb keys list --name "${{ env.DATABASEACCOUNTID }}" --resource-group "${{ env.RESOURCEGROUPNAME }}" --type connection-strings --query connectionStrings[0].connectionString |xargs`"
        
    - name: Update connection string   
      uses: microsoft/variable-substitution@v1 
      with:
        files: './Application/connectionData.json'
      env:
        connectionString: "${{ steps.getConnectionStrings.outputs.connectionstrings }}"
          
    # Deploy web app
    - name: 'Deploy to Azure WebApp'
      uses: azure/webapps-deploy@v2
      with: 
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
  FunctionalTests:
    name: Run Functional tests
    runs-on: windows-latest
    needs: Deploy
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ env.NODE_VERSION }}
    # Run functional tests
    - name: set up test environment and run tests
      continue-on-error: false
      run: |
        cd Application
        npm install
        cd ../Tests
        npm install
        $Path = $env:TEMP; $Installer = "chrome_installer.exe"; Invoke-WebRequest "https://dl.google.com/chrome/install/latest/chrome_installer.exe" -OutFile $Path$Installer; Start-Process -FilePath $Path$Installer -Args "/silent /install" -Verb RunAs -Wait; Remove-Item $Path$Installer
        Invoke-WebRequest https://chromedriver.storage.googleapis.com/83.0.4103.39/chromedriver_win32.zip -outFile chromedriver.zip
        Expand-Archive -Path chromedriver.zip
        Remove-Item chromedriver.zip
        gulp functionaltest --webAppUrl https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/